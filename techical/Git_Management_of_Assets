

Momenteel is de productieomgeving codebase geplaatst in een private repository van bitbucket.org. De repository work door middel van het git-flow branching model beheerd. Door middel van geavanceerde git-functionaliteit kunnen we een breed scala aan werkwijzen faciliteren. Ik zal in dit artikel een aantal van de mogelijkheden aan bod laten k0men.

### .gitignore

Met de handige conventie van het `.gitignore` bestand kunnen we makkelijk bestanden uitsluiten van versiebeheer (in die branch). Deze voor [Magento geschreven repressieve `.gitignore`](https://raw.github.com/github/gitignore/master/Magento.gitignore) sluit alles uit dat op enigerlij wijze anders te herstellen is. Is de codebase netjes gescheiden, waarbij enige vorm van contact met de core vermeden wordt, dan staan alleen de custom bestanden in de repository.

Aan de andere kant van het spectrum, kunnen we maar niet veilig genoeg zijn. Neem een `.gitignore` als de onderstaande:
```
var/session/*
var/locls/*
var/cache/*
downloader/pearlib/cache/*
```

En we zien dat hier alleen de echt volatile, variabele data uitgesloten wordt van de push naar de remote host. Sterker nog, 




## .gitignore

De `.gitignore` bestanden vormen een zeer handige aanvulling op de al zo krachtige werking van git. Hiermee is het, in navolging van andere programma's die deze conventie hanteren, mogelijk om bestanden uit te sluiten van een repository. Staan deze bestanden in je lokale map, dan gebeurt er niets mee, al dien je dus zeer goed in de gaten te houden of ze te verwaarlozen zijn. Essentiele resources, broncode, afbeeldingen moeten altijd (niet perse onder versiebeheer) gebackuped zijn.

### Minimale customizations
Deze [repressieve `.gitignore`](https://raw.github.com/github/gitignore/master/Magento.gitignore) sluit veel, heel veel zaken uit. Hierbij blijven customizations behouden maar wordt voor het overige slechts het strict noodzakelijke voor herstel naar de repository geschreven. Hoewel vanuit sociaal/bandbreedte/opslag principe een aardig idee, je dient er rekening mee te houden dat je dan de workflow perfect onder controle moet hebben en je codebase tot op de millimeter encapsulated zodat upgrades zo vlekkeloos mogelijk lopen.

### Alles behalve variabele data
Een iets veiligere oplossing - de vorige instellingen zouden kunnen leiden tot het verlies van resources